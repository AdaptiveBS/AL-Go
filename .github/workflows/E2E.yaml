name: End to end tests

on:
  workflow_dispatch:
    inputs:
      ref:
        description: ref on which to run the end-2-end tests (default is head_sha on main)
        required: false
        default: ''
      bcContainerHelperVersion:
        description: Which version of BcContainerHelper to use? (latest, preview, private or a specific version number - default is latest)
        required: false
        default: ''

defaults:
  run:
    shell: pwsh

jobs:
  Check:
    runs-on: [ ubuntu-latest ]
    outputs:
      githubOwner: ${{ steps.check.outputs.githubOwner }}
    steps:
      - name: Check secrets
        id: check
        run: |
          $err = $false
          if ('${{ Secrets.OrgPAT }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called OrgPAT containing a valid Personal Access Token with the following permissions: admin:org, delete_repo, repo, workflow"
            $err = $true
          }
          if ('${{ Secrets.githubOwner }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called githubOwner containing a the name of the owner of temp repositories"
            $err = $true
          }
          if ('${{ Secrets.adminCenterApiCredentials }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called adminCenterApiCredentials containing API access credentials for BC Admin Center"
            $err = $true
          }
          if ('${{ Secrets.licenseFileUrl }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called licenseFileUrl containing a secure Url to a build license file"
            $err = $true
          }
          if ('${{ Secrets.insiderSasToken }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called insiderSasToken containing the Insider SAS token from https://aka.ms/collaborate"
            $err = $true
          }
          if ($err) {
            exit 1
          }
          # Modify GitHubOwner secret in order to ensure that URLs are not masked in output
          # Makes troubleshooting much easier
          $githubOwner = '${{ Secrets.githubOwner }}'
          if ($githubOwner.ToLowerInvariant() -cne $githubOwner) {
            $githubOwner = $githubOwner.ToLowerInvariant()
          }
          else {
            $githubOwner = $githubOwner.ToUpperInvariant()
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "githubOwner=$githubOwner"
          Write-Host "githubOwner=$githubOwner"

  SetupRepositories:
    runs-on: [ ubuntu-latest ]
    needs: [ Check ]
    outputs:
      actionsRepo: ${{ steps.setup.outputs.actionsRepo }}
      perTenantExtensionRepo: ${{ steps.setup.outputs.perTenantExtensionRepo }}
      appSourceAppRepo: ${{ steps.setup.outputs.appSourceAppRepo }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Setup Repositories
        id: setup
        run: |
          $errorActionPreference = "STOP"
          . (Join-Path "." "e2eTests/SetupRepositories.ps1") -githubOwner '${{ needs.Check.outputs.githubowner }}' -token '${{ Secrets.OrgPAT }}' -bcContainerHelperVersion ${{ github.event.inputs.bcContainerHelperVersion }}
  
  Analyze:
    runs-on: [ ubuntu-latest ]
    needs: [ Check ]
    outputs:
      releases: ${{ steps.Analyze.outputs.releases }}
      scenarios: ${{ steps.Analyze.outputs.scenarios }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Analyze
        id: Analyze
        run: |
          $modulePath = Join-Path "." "e2eTests\e2eTestHelper.psm1" -resolve
          Import-Module $modulePath -DisableNameChecking
          SetTokenAndRepository -githubOwner '${{ needs.Check.outputs.githubowner }}' -token '${{ Secrets.OrgPAT }}' -repository "microsoft/AL-Go"
          $releases = @(gh release list --repo microsoft/AL-Go | ForEach-Object { $_.split("`t")[0] })
          Write-Host "Releases: $($releases -join ', ')"
          if ($releases.Count -eq 1) {
            $releasesJSon = "[$($releases | ConvertTo-Json -compress)]"
          }
          else {
            $releasesJSon = $releases | ConvertTo-Json -compress
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "releases=$releasesJson"
          Write-Host "releases=$releasesJson"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "releasesCount=$($releases.Count)"
          Write-Host "releasesCount=$($releases.Count)"
          $scenarios = @(Get-ChildItem -path (Join-Path $ENV:GITHUB_WORKSPACE "e2eTests/scenarios/*/runtest.ps1") | ForEach-Object { $_.Directory.Name })
          if ($scenarios.Count -eq 1) {
            $scenariosJSon = "[$($scenarios | ConvertTo-Json -compress)]"
          }
          else {
            $scenariosJSon = $scenarios | ConvertTo-Json -compress
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "scenarios=$scenariosJson"
          Write-Host "scenarios=$scenariosJson"

  Scenario:
    runs-on: [ ubuntu-latest ]
    needs: [ Check, SetupRepositories, Analyze ]
    strategy:
      matrix:
        scenario: ${{ fromJson(needs.Analyze.outputs.scenarios) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Calculate parameters
        id: calculateParams
        run: |
          $errorActionPreference = "STOP"
          $reponame = [System.IO.Path]::GetFileNameWithoutExtension([System.IO.Path]::GetTempFileName())
          Add-Content -Path $env:GITHUB_OUTPUT -Value "repoName='$repoName'"
          Write-Host "repoName='$repoName'"
          Write-Host "Repo URL: https://github.com/'${{ needs.Check.outputs.githubowner }}'/$repoName"

      - name: Run test
        run: |
          $errorActionPreference = "STOP"
          . (Join-Path "." "e2eTests/scenarios/${{ matrix.scenario }}/runtest.ps1") -githubOwner '${{ needs.Check.outputs.githubowner }}' -repoName ${{ steps.calculateParams.outputs.repoName }} -token '${{ Secrets.OrgPAT }}' -InsiderSasToken '${{ Secrets.InsiderSasToken }}' -pteTemplate '${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}' -appSourceTemplate '${{ needs.SetupRepositories.outputs.appSourceAppRepo }}' -adminCenterApiCredentials '${{ Secrets.adminCenterApiCredentials }}' -licenseFileUrl '${{ Secrets.licenseFileUrl }}'

  TestAlGo:
    runs-on: [ ubuntu-latest ]
    needs: [ Check, SetupRepositories ]
    strategy:
      matrix:
        visibility: [ 'private', 'public' ]
        type: [ 'appSourceApp', 'PTE' ]
        style: [ 'multiProject', 'singleProject' ]
        os: [ 'linux', 'windows' ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Calculate parameters
        id: calculateParams
        run: |
          $errorActionPreference = "STOP"
          $adminCenterApiCredentials = ''
          $licenseFileUrl = ''
          if ('${{ matrix.type }}' -eq 'PTE' -and '${{ matrix.style }}' -eq 'singleProject' -and '${{ matrix.os }}' -eq 'windows') {
            $adminCenterApiCredentials = '${{ Secrets.adminCenterApiCredentials }}'
          }
          if ('${{ matrix.type }}' -eq 'appSourceApp') {
            $licenseFileUrl='${{ secrets.licenseFileUrl }}'
            $template = '${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
          }
          else {
            $template = '${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}'
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "adminCenterApiCredentials='$adminCenterApiCredentials'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "licenseFileUrl='$licenseFileUrl'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "template='$template'"
          $reponame = [System.IO.Path]::GetFileNameWithoutExtension([System.IO.Path]::GetTempFileName())
          Add-Content -Path $env:GITHUB_OUTPUT -Value "repoName='$repoName'"
          Write-Host "repoName='$repoName'"
          Write-Host "Repo URL: https://github.com/'${{ needs.Check.outputs.githubowner }}'/$repoName"

      - name: Run tests
        run: |
          $errorActionPreference = "STOP"
          #. (Join-Path "." "e2eTests/Test-AL-Go.ps1") -githubOwner '${{ needs.Check.outputs.githubowner }}' -repoName ${{ steps.calculateParams.outputs.repoName }} -token '${{ Secrets.OrgPAT }}' -InsiderSasToken '${{ Secrets.InsiderSasToken }}' -template ${{ steps.calculateParams.outputs.template }} -adminCenterApiCredentials ${{ steps.calculateParams.outputs.adminCenterApiCredentials }} -licenseFileUrl ${{ steps.calculateParams.outputs.licenseFileUrl }} -multiProject:('${{ matrix.style }}' -eq 'multiProject') -appSource:('${{ matrix.type }}' -eq 'appSourceApp') -linux:('${{ matrix.os }}' -eq 'linux') -private:('${{ matrix.visibility }}' -eq 'private')

  TestAlGoUpgrade:
    runs-on: [ ubuntu-latest ]
    needs: [ Check, SetupRepositories, Analyze ]
    strategy:
      matrix:
        release: ${{ fromJson(needs.Analyze.outputs.releases) }}
        type: [ 'appSourceApp', 'PTE' ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Calculate parameters
        id: calculateParams
        run: |
          $errorActionPreference = "STOP"
          if ('${{ matrix.type }}' -eq 'appSourceApp') {
            $licenseFileUrl = '${{ secrets.licenseFileUrl }}'
            $template = '${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
            $path = 'appsourceapp'
          }
          else {
            $licenseFileUrl = ''
            $template = '${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}'
            $path = 'pte'
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "licenseFileUrl='$licenseFileUrl'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "template='$template'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "path='$path'"
          $reponame = [System.IO.Path]::GetFileNameWithoutExtension([System.IO.Path]::GetTempFileName())
          Add-Content -Path $env:GITHUB_OUTPUT -Value "repoName='$repoName'"
          Write-Host "repoName='$repoName'"
          Write-Host "Repo URL: https://github.com/'${{ needs.Check.outputs.githubowner }}'/$repoName"

      - name: Run tests
        run: |
          $errorActionPreference = "STOP"
          #. (Join-Path "." "e2eTests/Test-AL-Go-Upgrade.ps1") -githubOwner '${{ needs.Check.outputs.githubowner }}' -repoName ${{ steps.calculateParams.outputs.repoName }} -token '${{ Secrets.OrgPAT }}' -template ${{ steps.calculateParams.outputs.template }} -licenseFileUrl ${{ steps.calculateParams.outputs.licenseFileUrl }} -appSource:('${{ matrix.type }}' -eq 'appSourceApp') -release '${{ matrix.release }}' -path ${{ steps.calculateParams.outputs.path }}

  RemoveRepositories:
    runs-on: [ ubuntu-latest ]
    needs: [ Check, SetupRepositories, TestAlGo, TestAlGoUpgrade, Scenario ]
    if: always() && (${{ needs.SetupRepositories.result == 'Success' }})
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Remove Repositories
        run: |
          $errorActionPreference = "STOP"
          . (Join-Path "." "e2eTests/RemoveRepositories.ps1") -githubOwner '${{ needs.Check.outputs.githubowner }}' -token '${{ Secrets.OrgPAT }}' -actionsRepo '${{ needs.SetupRepositories.outputs.actionsRepo }}' -perTenantExtensionRepo '${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}' -appSourceAppRepo '${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
