name: End to end tests

on:
  workflow_dispatch:
    inputs:
      ref:
        description: ref on which to run the end-2-end tests (default is head_sha on main)
        required: false
        default: ''

defaults:
  run:
    shell: PowerShell

jobs:
  Check:
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Check secrets
        run: |
          $err = $false
          if ('${{ Secrets.OrgPAT }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called OrgPAT containing a valid Personal Access Token"
            $err = $true
          }
          if ('${{ Secrets.githubOwner }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called githubOwner containing a the name of the owner of temp repositories"
            $err = $true
          }
          if ('${{ Secrets.adminCenterApiCredentials }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called adminCenterApiCredentials containing API access credentials for BC Admin Center"
            $err = $true
          }
          if ('${{ Secrets.licenseFileUrl }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called licenseFileUrl containing a secure Url to a build license file"
            $err = $true
          }
          if ('${{ Secrets.insiderSasToken }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called insiderSasToken containing the Insider SAS token from https://aka.ms/collaborate"
            $err = $true
          }
          if ($err) {
            exit 1
          }

  SetupRepositories:
    runs-on: [ ubuntu-latest ]
    needs: [ Check ]
    outputs:
      actionsRepo: ${{ steps.setup.outputs.actionsRepo }}
      perTenantExtensionRepo: ${{ steps.setup.outputs.perTenantExtensionRepo }}
      appSourceAppRepo: ${{ steps.setup.outputs.appSourceAppRepo }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Setup Repositories
        id: setup
        run: e2eTests\SetupRepositories.ps1 -github -githubOwner '${{ Secrets.githubOwner }}' -token '${{ Secrets.OrgPAT }}'
  
  CalculateReleases:
    runs-on: [ ubuntu-latest ]
    needs: [ Check ]
    outputs:
      releases: ${{ steps.calculatereleases.outputs.releases }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: CalculateReleases
        id: calculateReleases
        run: |
          $modulePath = (Get-Item ".\e2eTests\e2eTestHelper.psm1").FullName
          Import-Module $modulePath -DisableNameChecking
          SetTokenAndRepository -githubOwner '${{ Secrets.githubOwner }}' -token '${{ Secrets.OrgPAT }}' -repository "microsoft/AL-Go" -github
          $releases = @(gh release list --repo microsoft/AL-Go | ForEach-Object { $_.split("`t")[0] })
          Write-Host "Releases: $($releases -join ', ')"
          if ($releases.Count -eq 1) {
            $releasesJSon = "[$($releases | ConvertTo-Json -compress)]"
          }
          else {
            $releasesJSon = $releases | ConvertTo-Json -compress
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "releases=$releasesJson"
          Write-Host "releases=$releasesJson"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "releasesCount=$($releases.Count)"
          Write-Host "releasesCount=$($releases.Count)"

  TestAlGo:
    runs-on: [ ubuntu-latest ]
    needs: [ SetupRepositories ]
    strategy:
      matrix:
        private: [ 'private', 'public' ]
        appSource: [ 'appSourceApp', 'PTE' ]
        multiProject: [ 'multiProject', 'singleProject' ]
        linux: [ 'linux', 'windows' ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Calculate parameters
        id: calculateParams
        run: |
          $errorActionPreference = "STOP"
          $adminCenterApiCredentials = ''
          $licenseFileUrl = ''
          if ('${{ matrix.appSource }}' -eq 'PTE' -and '${{ matrix.multiProject }}' -eq 'singleProject' -and '${{ matrix.linux }}' -eq 'windows') {
            $adminCenterApiCredentials = '${{ Secrets.adminCenterApiCredentials }}'
          }
          if ('${{ matrix.appSource }}' -eq 'appSourceApp') {
            $licenseFileUrl='${{ secrets.licenseFileUrl }}'
            $template = '${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
          }
          else {
            $template = '${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}'
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "adminCenterApiCredentials='$adminCenterApiCredentials'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "licenseFileUrl='$licenseFileUrl'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "template='$template'"

      - name: Run tests
        run: |
          $errorActionPreference = "STOP"
          e2eTests\Test-AL-Go.ps1 -github -githubOwner '${{ Secrets.githubOwner }}' -token '${{ Secrets.OrgPAT }}' -InsiderSasToken '${{ Secrets.InsiderSasToken }}' -template ${{ steps.calculateParams.outputs.template }} -adminCenterApiCredentials ${{ steps.calculateParams.outputs.adminCenterApiCredentials }} -licenseFileUrl ${{ steps.calculateParams.outputs.licenseFileUrl }} -multiProject:('${{ matrix.multiProject }}' -eq 'multiProject') -appSource:('${{ matrix.appSource }}' -eq 'appSourceApp') -linux:('${{ matrix.linux }}' -eq 'linux')

  TestAlGoUpgrade:
    runs-on: [ ubuntu-latest ]
    needs: [ SetupRepositories, CalculateReleases ]
    strategy:
      matrix:
        release: ${{ fromJson(needs.CalculateReleases.outputs.releases) }}
        appSource: [ 'appSourceApp', 'PTE' ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Calculate parameters
        id: calculateParams
        run: |
          $errorActionPreference = "STOP"
          if ('${{ matrix.appSource }}' -eq 'appSourceApp') {
            $licenseFileUrl = '${{ secrets.licenseFileUrl }}'
            $template = '${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
            $path = 'appsourceapp'
          }
          else {
            $licenseFileUrl = ''
            $template = '${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}'
            $path = 'pte'
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "licenseFileUrl='$licenseFileUrl'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "template='$template'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "path='$path'"

      - name: Run tests
        run: |
          $errorActionPreference = "STOP"
          e2eTests\Test-AL-Go-Upgrade.ps1 -github -githubOwner '${{ Secrets.githubOwner }}' -token '${{ Secrets.OrgPAT }}' -template ${{ steps.calculateParams.outputs.template }} -licenseFileUrl ${{ steps.calculateParams.outputs.licenseFileUrl }} -appSource:('${{ matrix.appSource }}' -eq 'appSourceApp') -release '${{ matrix.release }}' -path ${{ steps.calculateParams.outputs.path }}

  RemoveRepositories:
    runs-on: [ ubuntu-latest ]
    needs: [ SetupRepositories, TestAlGo, TestAlGoUpgrade ]
    if: always() && (${{ needs.SetupRepositories.result == 'Success' }})
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Remove Repositories
        run: e2eTests\RemoveRepositories.ps1 -github -githubOwner '${{ Secrets.githubOwner }}' -token '${{ Secrets.OrgPAT }}' -actionsRepo '${{ needs.SetupRepositories.outputs.actionsRepo }}' -perTenantExtensionRepo '${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}' -appSourceAppRepo '${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
