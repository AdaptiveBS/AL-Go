name: End to end tests

on:
  workflow_dispatch:
    inputs:
      ref:
        description: ref on which to run the end-2-end tests (default is head_sha on main)
        required: false
        default: ''
      githubOwner:
        description: GitHub organization set as owner for the temp repositories (default is to use your personal account - CANNOT be a free account)
        required: false
        default: ''
      runTestMatrix:
        description: Run the End 2 End Test Scenario for the full test matrix
        required: false
        default: 'Y'
      runScenarios:
        description: Run the End 2 End Scenario Tests
        required: false
        default: 'Y'
      runUpgradeTests:
        description: Run the End 2 End Upgrade Tests
        required: false
        default: 'Y'
      bcContainerHelperVersion:
        description: Which version of BcContainerHelper to use? (latest, preview, private, a specific version number or a direct download URL like https://github.com/freddydk/navcontainerhelper/archive/master.zip - leave empty to use latest)
        required: false
        default: 'preview'

defaults:
  run:
    shell: pwsh

jobs:
  Check:
    runs-on: [ ubuntu-latest ]
    outputs:
      maxParallel: ${{ steps.check.outputs.maxParallel }}
      githubOwner: ${{ steps.check.outputs.githubOwner }}
      E2EPAT: ${{ steps.check.outputs.E2EPAT }}
    steps:
      - uses: actions/checkout@v3

      - name: Check secrets
        id: check
        env:
          githubOwner: ${{ github.event.inputs.githubOwner }}
        run: |
          $err = $false
          if ('${{ Secrets.E2EPAT }}' -ne '') {
            $E2EPAT = '${{ Secrets.E2EPAT }}'
          }
          elseif ('${{ Secrets.OrgPAT }}' -ne '') {
            $E2EPAT = '${{ Secrets.OrgPAT }}'
          }
          else {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called E2EPAT (or OrgPAT) containing a valid Personal Access Token with the following permissions: admin:org, delete_repo, repo, workflow, packages:write"
            $err = $true
          }
          if ('${{ Secrets.adminCenterApiCredentials }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called adminCenterApiCredentials containing API access credentials for BC Admin Center"
            $err = $true
          }
          if ('${{ Secrets.licenseFileUrl }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called licenseFileUrl containing a secure Url to a build license file"
            $err = $true
          }
          if ('${{ Secrets.insiderSasToken }}' -eq '') {
            Write-Host "::Error::In order to run end to end tests, you need a Secret called insiderSasToken containing the Insider SAS token from https://aka.ms/collaborate"
            $err = $true
          }
          if ($err) {
            exit 1
          }
          $githubOwner = $ENV:githubOwner
          $maxParallel = 99
          if (!($githubOwner)) {
              $githubOwner = "$ENV:GITHUB_REPOSITORY_OWNER"
          }
          $orgmap = Get-Content -path (Join-Path "." "e2eTests\orgmap.json") -encoding UTF8 -raw | ConvertFrom-Json
          if ($orgmap.PSObject.Properties.Name -eq $githubOwner) {
            $githubOwner = $orgmap."$githubOwner"
          }
          if ($githubOwner -eq $ENV:GITHUB_REPOSITORY_OWNER) {
            $maxParallel = 8
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "maxParallel=$maxParallel"
          Write-Host "maxParallel=$maxParallel"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "E2EPAT=$E2EPAT"
          Write-Host "E2EPAT=$E2EPAT"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "githubOwner=$githubOwner"
          Write-Host "githubOwner=$githubOwner"

  SetupRepositories:
    runs-on: [ ubuntu-latest ]
    needs: [ Check ]
    outputs:
      actionsRepo: ${{ steps.setup.outputs.actionsRepo }}
      perTenantExtensionRepo: ${{ steps.setup.outputs.perTenantExtensionRepo }}
      appSourceAppRepo: ${{ steps.setup.outputs.appSourceAppRepo }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Setup Repositories
        id: setup
        run: |
          $errorActionPreference = "STOP"
          . (Join-Path "." "e2eTests/SetupRepositories.ps1") -github -githubOwner '${{ needs.Check.outputs.githubowner }}' -token '${{ needs.Check.outputs.E2EPAT }}' -bcContainerHelperVersion '${{ github.event.inputs.bcContainerHelperVersion }}'
  
  Analyze:
    runs-on: [ ubuntu-latest ]
    needs: [ Check ]
    outputs:
      releases: ${{ steps.Analyze.outputs.releases }}
      scenarios: ${{ steps.Analyze.outputs.scenarios }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Analyze
        id: Analyze
        run: |
          $errorActionPreference = "STOP"
          $modulePath = Join-Path "." "e2eTests\e2eTestHelper.psm1" -resolve
          Import-Module $modulePath -DisableNameChecking
          SetTokenAndRepository -github -githubOwner '${{ needs.Check.outputs.githubowner }}' -token '${{ needs.Check.outputs.E2EPAT }}' -repository "microsoft/AL-Go"
          $releases = @(gh release list --repo microsoft/AL-Go | ForEach-Object { $_.split("`t")[0] })
          Write-Host "Releases: $($releases -join ', ')"
          if ($releases.Count -le 1) {
            $releasesJSon = "[$($releases | ConvertTo-Json -compress)]"
          }
          else {
            $releasesJSon = $releases | ConvertTo-Json -compress
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "releases=$releasesJson"
          Write-Host "releases=$releasesJson"
          $scenarios = @(Get-ChildItem -path (Join-Path $ENV:GITHUB_WORKSPACE "e2eTests/scenarios/*/runtest.ps1") | ForEach-Object { $_.Directory.Name })
          if ($scenarios.Count -le 1) {
            $scenariosJSon = "[$($scenarios | ConvertTo-Json -compress)]"
          }
          else {
            $scenariosJSon = $scenarios | ConvertTo-Json -compress
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "scenarios=$scenariosJson"
          Write-Host "scenarios=$scenariosJson"

  Scenario:
    runs-on: [ windows-latest ]
    needs: [ Check, SetupRepositories, Analyze ]
    strategy:
      matrix:
        scenario: ${{ fromJson(needs.Analyze.outputs.scenarios) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        if: github.event.inputs.runScenarios == 'Y'
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Calculate parameters
        if: github.event.inputs.runScenarios == 'Y'
        id: calculateParams
        run: |
          $errorActionPreference = "STOP"
          $reponame = [System.IO.Path]::GetFileNameWithoutExtension([System.IO.Path]::GetTempFileName())
          Add-Content -Path $env:GITHUB_OUTPUT -Value "repoName='$repoName'"
          Write-Host "repoName='$repoName'"
          Write-Host "Repo URL: https://github.com/${{ needs.Check.outputs.githubowner }}/$repoName"

      - name: Run test
        if: github.event.inputs.runScenarios == 'Y'
        run: |
          try {
            . (Join-Path "." "e2eTests/scenarios/${{ matrix.scenario }}/runtest.ps1") -github -githubOwner '${{ needs.Check.outputs.githubowner }}' -repoName ${{ steps.calculateParams.outputs.repoName }} -token '${{ needs.Check.outputs.E2EPAT }}' -InsiderSasToken '${{ Secrets.InsiderSasToken }}' -pteTemplate '${{ needs.Check.outputs.githubowner }}/${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}' -appSourceTemplate '${{ needs.Check.outputs.githubowner }}/${{ needs.SetupRepositories.outputs.appSourceAppRepo }}' -adminCenterApiToken '${{ Secrets.adminCenterApiCredentials }}' -licenseFileUrl '${{ Secrets.licenseFileUrl }}'
          }
          catch {
            Write-Host $_.Exception.Message
            Write-Host $_.ScriptStackTrace
            Write-Host "::Error::$($_.Exception.Message)"
            $host.SetShouldExit(1)
          }

  TestAlGo:
    runs-on: [ ubuntu-latest ]
    needs: [ Check, SetupRepositories ]
    strategy:
      matrix:
        visibility: [ 'private', 'public' ]
        type: [ 'appSourceApp', 'PTE' ]
        style: [ 'multiProject', 'singleProject' ]
        os: [ 'linux', 'windows' ]
      max-parallel: ${{ needs.Check.outputs.maxParallel }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        if: github.event.inputs.runTestMatrix == 'Y'
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Calculate parameters
        if: github.event.inputs.runTestMatrix == 'Y'
        id: calculateParams
        run: |
          $errorActionPreference = "STOP"
          $adminCenterApiCredentials = ''
          $licenseFileUrl = ''
          if ('${{ matrix.type }}' -eq 'PTE' -and '${{ matrix.style }}' -eq 'singleProject' -and '${{ matrix.os }}' -eq 'windows') {
            $adminCenterApiCredentials = '${{ Secrets.adminCenterApiCredentials }}'
          }
          if ('${{ matrix.type }}' -eq 'appSourceApp') {
            $licenseFileUrl='${{ secrets.licenseFileUrl }}'
            $template = '${{ needs.Check.outputs.githubowner }}/${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
          }
          else {
            $template = '${{ needs.Check.outputs.githubowner }}/${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}'
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "adminCenterApiCredentials='$adminCenterApiCredentials'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "licenseFileUrl='$licenseFileUrl'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "template='$template'"
          $reponame = [System.IO.Path]::GetFileNameWithoutExtension([System.IO.Path]::GetTempFileName())
          Add-Content -Path $env:GITHUB_OUTPUT -Value "repoName='$repoName'"
          Write-Host "repoName='$repoName'"
          Write-Host "Repo URL: https://github.com/${{ needs.Check.outputs.githubowner }}/$repoName"

      - name: Run tests
        if: github.event.inputs.runTestMatrix == 'Y'
        run: |
          try {
            . (Join-Path "." "e2eTests/Test-AL-Go.ps1") -github -githubOwner '${{ needs.Check.outputs.githubowner }}' -repoName ${{ steps.calculateParams.outputs.repoName }} -token '${{ needs.Check.outputs.E2EPAT }}' -InsiderSasToken '${{ Secrets.InsiderSasToken }}' -template ${{ steps.calculateParams.outputs.template }} -adminCenterApiToken ${{ steps.calculateParams.outputs.adminCenterApiCredentials }} -licenseFileUrl ${{ steps.calculateParams.outputs.licenseFileUrl }} -multiProject:('${{ matrix.style }}' -eq 'multiProject') -appSource:('${{ matrix.type }}' -eq 'appSourceApp') -linux:('${{ matrix.os }}' -eq 'linux') -private:('${{ matrix.visibility }}' -eq 'private')
          }
          catch {
            Write-Host $_.Exception.Message
            Write-Host $_.ScriptStackTrace
            Write-Host "::Error::$($_.Exception.Message)"
            $host.SetShouldExit(1)
          }

  TestAlGoUpgrade:
    runs-on: [ ubuntu-latest ]
    needs: [ Check, SetupRepositories, Analyze ]
    strategy:
      matrix:
        release: ${{ fromJson(needs.Analyze.outputs.releases) }}
        type: [ 'appSourceApp', 'PTE' ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        if: github.event.inputs.runUpgradeTests == 'Y'
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Calculate parameters
        if: github.event.inputs.runUpgradeTests == 'Y'
        id: calculateParams
        run: |
          $errorActionPreference = "STOP"
          if ('${{ matrix.type }}' -eq 'appSourceApp') {
            $licenseFileUrl = '${{ secrets.licenseFileUrl }}'
            $template = '${{ needs.Check.outputs.githubowner }}/${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
            $contentPath = 'appsourceapp'
          }
          else {
            $licenseFileUrl = ''
            $template = '${{ needs.Check.outputs.githubowner }}/${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}'
            $contentPath = 'pte'
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "licenseFileUrl='$licenseFileUrl'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "template='$template'"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "contentPath='$contentPath'"
          $reponame = [System.IO.Path]::GetFileNameWithoutExtension([System.IO.Path]::GetTempFileName())
          Add-Content -Path $env:GITHUB_OUTPUT -Value "repoName='$repoName'"
          Write-Host "repoName='$repoName'"
          Write-Host "Repo URL: https://github.com/${{ needs.Check.outputs.githubowner }}/$repoName"

      - name: Run tests
        if: github.event.inputs.runUpgradeTests == 'Y'
        run: |
          try {
            . (Join-Path "." "e2eTests/Test-AL-Go-Upgrade.ps1") -github -githubOwner '${{ needs.Check.outputs.githubowner }}' -repoName ${{ steps.calculateParams.outputs.repoName }} -token '${{ needs.Check.outputs.E2EPAT }}' -template ${{ steps.calculateParams.outputs.template }} -licenseFileUrl ${{ steps.calculateParams.outputs.licenseFileUrl }} -appSource:('${{ matrix.type }}' -eq 'appSourceApp') -release '${{ matrix.release }}' -contentPath ${{ steps.calculateParams.outputs.contentPath }}
          }
          catch {
            Write-Host $_.Exception.Message
            Write-Host $_.ScriptStackTrace
            Write-Host "::Error::$($_.Exception.Message)"
            $host.SetShouldExit(1)
          }

  RemoveRepositories:
    runs-on: [ ubuntu-latest ]
    needs: [ Check, SetupRepositories, TestAlGo, TestAlGoUpgrade, Scenario ]
    if: always() && (${{ needs.SetupRepositories.result == 'Success' }})
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Remove Repositories
        run: |
          $errorActionPreference = "STOP"
          . (Join-Path "." "e2eTests/RemoveRepositories.ps1") -github -githubOwner '${{ needs.Check.outputs.githubowner }}' -token '${{ needs.Check.outputs.E2EPAT }}' -actionsRepo '${{ needs.SetupRepositories.outputs.actionsRepo }}' -perTenantExtensionRepo '${{ needs.SetupRepositories.outputs.perTenantExtensionRepo }}' -appSourceAppRepo '${{ needs.SetupRepositories.outputs.appSourceAppRepo }}'
